# Example forge.yaml configuration with action advice
version: "1"

# Action advice configuration
advice:
  - id: "security-scan"
    type: "before"
    pointcuts:
      - projects: ["*"]
        targets: ["build", "package"]
        tags: ["production"]
    actions:
      - kind: "EXECUTE"
        runner: "shell"
        metadata:
          command: "trivy"
          args: ["fs", ".", "--exit-code", "1", "--severity", "HIGH,CRITICAL"]
    condition:
      env:
        CI: "true"
        
  - id: "code-quality"
    type: "before" 
    pointcuts:
      - projects: ["*"]
        targets: ["build"]
    actions:
      - kind: "EXECUTE"
        runner: "shell"
        resources: ["cpu"]
        metadata:
          command: "sonar-scanner"
          args: ["-Dproject.settings=sonar-project.properties"]
          
  - id: "artifact-upload"
    type: "after"
    pointcuts:
      - projects: ["app", "service"]
        targets: ["build"]
    actions:
      - kind: "EXECUTE"
        runner: "shell"
        resources: ["network"]
        outputs: ["artifacts/manifest.json"]
        metadata:
          command: "upload-artifacts"
          args: ["--project", "${project}", "--target", "${target}"]
    condition:
      env:
        DEPLOY_ENV: "production"
        
  - id: "performance-profiling"
    type: "around"
    pointcuts:
      - projects: ["*"] 
        targets: ["test"]
        tags: ["performance"]
    actions:
      - kind: "EXECUTE"  # Before action
        runner: "shell" 
        metadata:
          command: "perf-start"
          args: ["--output", "perf-${project}-${target}.data"]
      - kind: "EXECUTE"  # After action
        runner: "shell"
        metadata:
          command: "perf-stop"
          args: ["--analyze", "perf-${project}-${target}.data"]

# Project definitions
projects:
  app:
    root: "apps/web-app"
    tags: ["frontend", "production", "monitoring"]
    targets:
      build:
        executor: "npm"
        inputs:
          files: ["src/**", "package.json", "webpack.config.js"]
          env: ["NODE_ENV"]
        outputs: ["dist/**"]
        metadata:
          tags: ["security"]
          
      test:
        executor: "npm"  
        inputs:
          files: ["src/**", "test/**", "jest.config.js"]
        metadata:
          tags: ["performance"]
          
  service:
    root: "services/auth-service"
    tags: ["backend", "production", "security"]
    targets:
      build:
        executor: "gradle"
        inputs:
          files: ["src/**", "build.gradle.kts"]
          env: ["JAVA_HOME"]
        outputs: ["build/libs/**"]
        metadata:
          tags: ["security"]